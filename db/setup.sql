-- MySQL Script generated by MySQL Workbench
-- чт, 16-кві-2020 15:57:43 +0300
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema real_estate
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `real_estate` ;

-- -----------------------------------------------------
-- Schema real_estate
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `real_estate` DEFAULT CHARACTER SET utf8 ;
USE `real_estate` ;

-- -----------------------------------------------------
-- Table `real_estate`.`city`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `real_estate`.`city` ;

CREATE TABLE IF NOT EXISTS `real_estate`.`city` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(45) NOT NULL,
  `code` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `real_estate`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `real_estate`.`user` ;

CREATE TABLE IF NOT EXISTS `real_estate`.`user` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nickname` VARCHAR(45) NOT NULL,
  `password` CHAR(60) NOT NULL,
  `phone_number` VARCHAR(15) NOT NULL,
  `avatar` VARCHAR(255) NULL,
  `city_id` INT NULL,
  `is_suspended` TINYINT(1) NULL DEFAULT 0,
  `is_admin` TINYINT(1) NULL DEFAULT 0,
  `is_confirmed` TINYINT(1) NULL DEFAULT 0,
  `insert_dt` DATETIME NULL DEFAULT NOW(),
  `update_dt` TIMESTAMP NULL DEFAULT NOW(),
  PRIMARY KEY (`id`),
  UNIQUE INDEX `ak_nickname` (`nickname` ASC),
  INDEX `fk_user_city_idx` (`city_id` ASC),
  CONSTRAINT `fk_user_city`
    FOREIGN KEY (`city_id`)
    REFERENCES `real_estate`.`city` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `real_estate`.`estate`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `real_estate`.`estate` ;

CREATE TABLE IF NOT EXISTS `real_estate`.`estate` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(128) NOT NULL,
  `price` INT NOT NULL,
  `is_rent` TINYINT(1) NULL DEFAULT 0,
  `city_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `selling_date` DATE NULL,
  `insert_dt` DATETIME NULL DEFAULT NOW(),
  `update_dt` TIMESTAMP NULL DEFAULT NOW(),
  PRIMARY KEY (`id`),
  INDEX `fk_estate_city_idx` (`city_id` ASC),
  INDEX `fk_estate_user_idx` (`user_id` ASC),
  INDEX `idx_title` (`title` ASC),
  CONSTRAINT `fk_estate_city1`
    FOREIGN KEY (`city_id`)
    REFERENCES `real_estate`.`city` (`id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_estate_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `real_estate`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `real_estate`.`file`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `real_estate`.`file` ;

CREATE TABLE IF NOT EXISTS `real_estate`.`file` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `url` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `ak_url` (`url` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `real_estate`.`estate_file`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `real_estate`.`estate_file` ;

CREATE TABLE IF NOT EXISTS `real_estate`.`estate_file` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `estate_id` INT NOT NULL,
  `file_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_estate_file_estate1_idx` (`estate_id` ASC),
  INDEX `fk_estate_file_file1_idx` (`file_id` ASC),
  UNIQUE INDEX `ak_estate_file` (`estate_id` ASC, `file_id` ASC),
  CONSTRAINT `fk_estate_file_estate1`
    FOREIGN KEY (`estate_id`)
    REFERENCES `real_estate`.`estate` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_estate_file_file1`
    FOREIGN KEY (`file_id`)
    REFERENCES `real_estate`.`file` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `real_estate`.`user_estate`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `real_estate`.`user_estate` ;

CREATE TABLE IF NOT EXISTS `real_estate`.`user_estate` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `estate_id` INT NOT NULL,
  INDEX `fk_user_estate_user1_idx` (`user_id` ASC),
  INDEX `fk_user_estate_estate1_idx` (`estate_id` ASC),
  PRIMARY KEY (`id`),
  UNIQUE INDEX `ak_user_estate` (`user_id` ASC, `estate_id` ASC),
  CONSTRAINT `fk_user_estate_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `real_estate`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_user_estate_estate1`
    FOREIGN KEY (`estate_id`)
    REFERENCES `real_estate`.`estate` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `real_estate` ;

-- -----------------------------------------------------
-- procedure create_user
-- -----------------------------------------------------

USE `real_estate`;
DROP procedure IF EXISTS `real_estate`.`create_user`;

DELIMITER $$
USE `real_estate`$$
CREATE PROCEDURE create_user(
	IN nickname VARCHAR(255), 
    IN password CHAR(60),
    IN phone_number VARCHAR(15) 
)
BEGIN

	INSERT INTO user (nickname, password, phone_number)
    VALUES (nickname, password, phone_number);
    
    SET @id = LAST_INSERT_ID();
    
	SELECT @id AS id;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure create_estate
-- -----------------------------------------------------

USE `real_estate`;
DROP procedure IF EXISTS `real_estate`.`create_estate`;

DELIMITER $$
USE `real_estate`$$
CREATE PROCEDURE create_estate(
	IN title VARCHAR(128),
    IN price INT,
    IN is_rent TINYINT,
    IN city_id INT,
    IN user_id INT
)
BEGIN
	INSERT INTO estate (title, price, is_rent, city_id, user_id)
    VALUES (title, price, is_rent, city_id, user_id);

	SET @id = LAST_INSERT_ID();

	SELECT @id AS id;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sel_by_city_id
-- -----------------------------------------------------

USE `real_estate`;
DROP procedure IF EXISTS `real_estate`.`sel_by_city_id`;

DELIMITER $$
USE `real_estate`$$
CREATE PROCEDURE sel_by_city_id(
	IN city_id INT
)
BEGIN
	SELECT
		id,
		title,
        price,
        is_sent
    FROM estate 
    WHERE 1=1
    AND city_id = city_id
    AND selling_date IS NOT NULL;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sel_estates_by_city_id
-- -----------------------------------------------------

USE `real_estate`;
DROP procedure IF EXISTS `real_estate`.`sel_estates_by_city_id`;

DELIMITER $$
USE `real_estate`$$
CREATE PROCEDURE sel_estates_by_city_id(
	IN city_id INT
)
BEGIN
	SELECT
		id,
		title,
        price,
        is_rent
    FROM estate 
    WHERE 1=1
		AND city_id = city_id
		AND selling_date IS NULL;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `real_estate`.`city`
-- -----------------------------------------------------
START TRANSACTION;
USE `real_estate`;
INSERT INTO `real_estate`.`city` (`id`, `title`, `code`) VALUES (DEFAULT, 'Kyiv', 'KYIV');
INSERT INTO `real_estate`.`city` (`id`, `title`, `code`) VALUES (DEFAULT, 'Moscow', 'MOSCOW');
INSERT INTO `real_estate`.`city` (`id`, `title`, `code`) VALUES (DEFAULT, 'Warsaw', 'WARSAW');

COMMIT;

USE `real_estate`;

DELIMITER $$

USE `real_estate`$$
DROP TRIGGER IF EXISTS `real_estate`.`estate_AFTER_UPDATE` $$
USE `real_estate`$$
CREATE DEFINER = CURRENT_USER TRIGGER `real_estate`.`estate_AFTER_UPDATE` AFTER UPDATE ON `estate` FOR EACH ROW
BEGIN
	SET NEW.update_dt = NOW();
END$$


DELIMITER ;
